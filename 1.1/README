**********************************************
* ALGORITHMS AND DATA STRUCTURES EXPLORATION *
**********************************************

Compiled algorithms and data structures listings by Osman Pub 2010-11.
Files have been edited so may differ from original listings.

Refer to credits below for original work.

(Use build script 'build.sh' to run all makefiles)

Report bugs and comments to osmanpub@gmail.com


************
* OsmanPub *
************
(generic versions derived from credits below)

data structures (in 'ds' directory)
===================================

clist.c	/* circular doubly linked list */
dlist.c	/* doubly linked list */
graph1.c	/* graph backed by a skip list using generic keys */
graph2.c	/* graph backed by a dynamic array using generic keys */
hash-tbl.c	/* hash tables back by a linked list using generic keys */
list.c	/* singly linked list */
mst.c	/* minimum spanning tree */
queue.c	/* queue backed by a list */
skiplist.c	/* skip list backed by a doubly linked list, using generic keys*/
stack.c	/* stack backed by a list */
tree.c	/* b-tree using generic keys */

algorithms (in 'algorithm' directory)
=====================================

back-track-demo.c /* demo of enumeration and sudoku */
edit-string-demo.c /* demo of edit-string, substring and lcs */
graph-print.c	/* graph printing functions */
graph-search.c	/* bfs, bi-connect, bi-partite, connections, dfs, find-path, 
                   strong components, top sort */
graph-vertex.c	/* graph bfs/dfs search vertex functions */
heuristic-demo.c /* demo of annealing, hill climbing and random sampling */
search-demo.c /* graph search demo */
mst-demo.c	/* kruskal, prim, shortest path on graphs */

************
* Algorist *
************
(Note that test script and data may not work for some programs, use original
listings from author instead.)

/*
Copyright 2003 by Steven S. Skiena; all rights reserved. 
Permission is granted for use in non-commerical applications
provided this copyright notice remains intact and unchanged.

These programs all appear in my book:
"Programming Challenges: The Programming Contest Training Manual"
by Steven Skiena and Miguel Revilla, Springer-Verlag, New York 2003.
See our website www.programming-challenges.com for additional information.

This book can be ordered from Amazon.com at
http://www.amazon.com/exec/obidos/ASIN/0387001638/thealgorithmrepo/
*/

What follows are a list of all the files in this directory with a
brief description of what they are:

8-queens.c	/* solve the eight queens problem using backtracking */
backtrack.c	/* a generic implementation of backtracking */
backtrack.h	/* header file for generic backtracking */
bfs-demo.c	/* driver program demonstrating breadth-first search */
bfs-dfs.c	/* a generic implementation of graph traversal */
bignum.c	/* implementation of large integer arithmetic */
binomial.c	/* compute the binomial coefficients using dynamic programming */
connected.c	/* compute connected components of a graph */
convex-hull.c	/* compute convex hulls of points in the plane */
datafiles/	/* a directory with test files for all the programs, see test-script */
dfs-demo.c	/* driver program demonstrating depth-first search */
dijkstra.c	/* compute shortest paths in weighted graphs */
distance.c	/* compute Euclidian distances */
editbrute.c	/* compute string edit distance *without* dynamic programming */
editdistance.c	/* a generic implementation of string comparison via dp */
editdistance.h	/* header file for string comparison */
elevator.c	/* elevator stop optimization via dynamic programming */
findcycle.c	/* identify a cycle in a graph, if one exists */
floyd.c		/* compute all-pairs shortest paths in weighted graphs */
gcd.c		/* compute the greatest common divisor of two integers */
geometry.c	/* basic geometric primitives and data types */
geometry.h	/* header file for geometric data types */
geotest.c	/* driver program for geometry routines */
lcs.c		/* longest common subsequence of two strings */
netflow.c	/* network flow implementation -- augmenting path algorithm */
order.c		/* demonstrate traversal orders on a grid */
permutations.c	/* construct all permutations via backtracking */
plates.c	/* compute the number of circles in two different packings */
polly.c		/* rank the desirability of suitors -- sorting example */
prim.c		/* compute minimum spanning trees of graphs via Prim's algorithm */
primes.c	/* compute the prime factorization of an integer */
random.c	/* compute random numbers within given ranges */
sorting.c	/* implementations of primary sorting algorithms */
stringedit.c	/* compute the optimal alignment matching two strings */
subsets.c	/* construct all subsets via backtracking */
substringedit.c	/* approximately match one string as a substring of another */
superman.c	/* compute Superman's flight path -- geometry example */
topsort.c	/* topologically sort a directed acyclic graph */
triangulate.c	/* triangulate a polygon via ear-clipping, and compute area */
war.c		/* simulation of the children's card game War */


***************
* Ackermann   *
* Hash funcs  *
* Hash tables *
* Skip list   *
* Union find  *
***************
/* Copyright (c) 2010 the authors listed at the following URL, and/or
the authors of referenced articles or incorporated external code:

http://en.literateprograms.org/Ackermann_function_(C)?action=history&offset=20081009144658
http://en.literateprograms.org/Disjoint_set_data_structure_(C)?action=history&offset=20080516180553
http://en.literateprograms.org/Hash_function_comparison_(C,_sh)?oldid=16462
http://en.literateprograms.org/Hash_table_(C)?action=history&offset=20100122102906
http://en.literateprograms.org/Skip_list_(C)?action=history&offset=20080313195128

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Retrieved from: http://en.literateprograms.org/Ackermann_function_(C)?oldid=14914
Retrieved from: http://en.literateprograms.org/Hash_table_(C)?oldid=16632
*/


***************
* Josephus    *
***************
Adapted from http://wiki.answers.com/Q/How_to_solve_Josephus_problem_using_c
